name: Polybot Infrastructure Terraform Environment

on:
  workflow_call:
    inputs:
      region-code:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      TELEGRAM_TOKEN:
        required: true
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  Terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: terraform  # The directory containing your Terraform configuration files
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.0

      - name: Terraform init
        run: terraform init

      - name: Terraform workspace select
        run: terraform workspace select ${{ inputs.region-code }}-${{ inputs.environment }} || terraform workspace new ${{ inputs.region-code }}-${{ inputs.environment }}

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: | 
          export TF_VAR_botToken=${{ secrets.TELEGRAM_TOKEN }}
          terraform plan -var-file=${{ inputs.region-code }}.${{ inputs.environment }}.tfvars

      - name: Terraform apply
        run: |
          export TF_VAR_botToken=${{ secrets.TELEGRAM_TOKEN }}
          terraform apply -auto-approve -var-file=${{ inputs.region-code }}.${{ inputs.environment }}.tfvars

      - name: Cluster Initialization
        run: |
          export REGION=${{ inputs.region-code }}
          export ENV=${{ inputs.environment }}
          export SSH_PRIVATE_KEY="${{ secrets.SSH_PRIVATE_KEY }}"
          chmod +x k8s_initializer.sh
          ./k8s_initializer.sh

      - name: Get the control plane ip
        run: |
          EC2_CONTROL_PLANE=$(aws ec2 describe-instances --region ${{ inputs.region-code }} \
              --filters "Name=tag:Name,Values=*control-plane*" \
                        "Name=tag:Name,Values=*yaelwil*" \
                        "Name=tag:Name,Values=*${{ inputs.environment }}" \
                        "Name=tag:Name,Values=*k8s-project*" \
              --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' \
              --output json)
          
          # Extract Control Plane IPs
          CONTROL_PLANE_IP=$(echo "$EC2_CONTROL_PLANE" | jq -r '.[][] | select(.[1] == "running") | .[2]')
          
          echo "CONTROL_PLANE_IP: $CONTROL_PLANE_IP"
          echo "CONTROL_PLANE_IP=$CONTROL_PLANE_IP" >> $GITHUB_ENV

      - name: Debug Control Plane IP
        run: |
          echo "Control Plane IP: $CONTROL_PLANE_IP"
        env:
          CONTROL_PLANE_IP: ${{ env.CONTROL_PLANE_IP }}


      - name: Copy and run k8s files
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > yaelwil-ohio.pem
          scp -i "yaelwil-ohio.pem" -r k8s ubuntu@$CONTROL_PLANE_IP:~/
        env:
          CONTROL_PLANE_IP: ${{ env.CONTROL_PLANE_IP }}