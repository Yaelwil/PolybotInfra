name: Polybot Infrastructure Region

on:
  workflow_call:
    inputs:
      region-code:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  Terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: terraform  # The directory containing your Terraform configuration files
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.0

      - name: Terraform init
        run: terraform init

      - name: Terraform workspace select
        run: terraform workspace select ${{ inputs.region-code }} || terraform workspace new ${{ inputs.region-code }}

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: | 
          terraform plan -var-file=region.${{ inputs.region-code }}.tfvars

      - name: Terraform apply
        run: |
          terraform apply -auto-approve -var-file=region.${{ inputs.region-code }}.tfvars

      - name: Get the control plane ip
        run: |
          EC2_CONTROL_PLANE=$(aws ec2 describe-instances --region ${{ inputs.region-code }} \
              --filters "Name=tag:Name,Values=*control-plane*" \
                        "Name=tag:Name,Values=*yaelwil*" \
                        "Name=tag:Name,Values=*k8s-project*" \
              --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' \
              --output json)
          
          # Extract Control Plane IPs
          CONTROL_PLANE_IP=$(echo "$EC2_CONTROL_PLANE" | jq -r '.[][] | select(.[1] == "running") | .[2]')          
          INSTANCE_CP_ID=$(echo "$EC2_CONTROL_PLANE" | jq -r '.[][] | select(.[1] == "running") | .[0]')
          echo "CONTROL_PLANE_IP=$CONTROL_PLANE_IP" >> $GITHUB_ENV
          echo "INSTANCE_CP_ID=$INSTANCE_CP_ID" >> $GITHUB_ENV

      - name: Get the worker node ip
        run: |
          EC2_WORKER_NODE=$(aws ec2 describe-instances --region ${{ inputs.region-code }} \
              --filters "Name=tag:Name,Values=*control-plane*" \
                        "Name=tag:Name,Values=*yaelwil*" \
                        "Name=tag:Name,Values=*k8s-project*" \
              --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' \
              --output json)
          
          # Extract Worker Nodes IPs
          WORKER_NODE_IP=$(echo "$EC2_CONTROL_PLANE" | jq -r '.[][] | select(.[1] == "running") | .[0]')
          echo "CONTROL_PLANE_IP=$CONTROL_PLANE_IP" >> $GITHUB_ENV

      - name: Wait for Control Plane and Worker Node Instances Status
        run: |
          # Wait for Control Plane instance to be OK
          aws ec2 wait instance-status-ok --instance-ids "$INSTANCE_CP_ID" --region ${{ inputs.region-code }}

          # Wait for all Worker Node instances to be OK
          for instance_id in $INSTANCE_WN_IDS; do
            aws ec2 wait instance-status-ok --instance-ids "$instance_id" --region ${{ inputs.region-code }}
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          INSTANCE_CP_ID: ${{ env.INSTANCE_CP_ID }}
          INSTANCE_WN_IDS: ${{ env.WORKER_NODE_ID }}

      - name: Set private key for connection
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > yaelwil-private-key.pem
          chmod 400 yaelwil-private-key.pem

      - name: Cluster Initialization
        run: |
          export REGION=${{ inputs.region-code }}
          export SSH_PRIVATE_KEY="${{ secrets.SSH_PRIVATE_KEY }}"
          chmod +x k8s_initializer.sh
          ./k8s_initializer.sh
        env:
          CONTROL_PLANE_IP: ${{ env.CONTROL_PLANE_IP }}
          
      - name: TLS secret creation
        run: |
          export REGION=${{ inputs.region-code }}
          export CERT_PREFIX_DEV="yaelwil-certificate-dev-${{ inputs.region-code }}"
          export KEY_PREFIX_DEV="yaelwil-certificate-pk-dev-${{ inputs.region-code }}"
          export secret_name_dev="tls-secret-dev"

          export CERT_PREFIX_PROD="yaelwil-certificate-prod-${{ inputs.region-code }}"
          export KEY_PREFIX_PROD="yaelwil-certificate-pk-prod-${{ inputs.region-code }}"
          export secret_name_prod="tls-secret-prod"
          
          echo $PWD
          # Copy necessary files to the control plane
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" -r ../../k8s ubuntu@$CONTROL_PLANE_IP:~/k8s
          
          # SSH into the control plane to execute the TLS secret creation
          ssh -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" ubuntu@$CONTROL_PLANE_IP << EOF
            # SSH into the control plane to create namespaces
            kubectl create namespace dev || echo "Namespace 'dev' already exists"
            kubectl create namespace prod || echo "Namespace 'prod' already exists"
          
            # Activate the virtual environment on the control plane
            source ~/myenv/bin/activate
            
            # Run the Python script for ingress setup on the control plane
            python3 ~/k8s/ingress_setup.py
          EOF
      - name: ConfigMap creation and copy
        run: |
          # Ensure the namespace exists
          ssh -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" ubuntu@$CONTROL_PLANE_IP \
          "kubectl create namespace ${{ inputs.environment }}" || echo 'Namespace already exists'

          # Generate the ConfigMap YAML file
          
          cat <<EOF > polybot-dev-configmap.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: polybot-config
            namespace: dev
          data:
            TELEGRAM_APP_URL: "https://${{ inputs.app-url }}"
            ALB_URL: "http://${{ inputs.app-url }}:80"
            REGION: "${{ inputs.region-code }}"
            BUCKET_NAME: "yaelwil-bucket-dev-${{ inputs.region-code }}-k8s-project"
            DYNAMODB_TABLE_NAME: "yaelwil-dynamodb-dev-${{ inputs.region-code }}-k8s-project"
            YOLO_QUEUE_NAME: "yaelwil-yolov5-sqs-queue-dev-${{ inputs.region-code }}-k8s-project.fifo"
            FILTERS_QUEUE_NAME: "yaelwil-filters-sqs-queue-dev-${{ inputs.region-code }}-k8s-project.fifo"
            TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
            CERT_PREFIX: "yaelwil-certificate-dev-${{ inputs.region-code }}"
          EOF
          
          cat <<EOF > polybot-prod-configmap.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: polybot-config
            namespace: prod
          data:
            TELEGRAM_APP_URL: "https://${{ inputs.app-url }}"
            ALB_URL: "http://${{ inputs.app-url }}:80"
            REGION: "${{ inputs.region-code }}"
            BUCKET_NAME: "yaelwil-bucket-prod-${{ inputs.region-code }}-k8s-project"
            DYNAMODB_TABLE_NAME: "yaelwil-dynamodb-prod-${{ inputs.region-code }}-k8s-project"
            YOLO_QUEUE_NAME: "yaelwil-yolov5-sqs-queue-prod-${{ inputs.region-code }}-k8s-project.fifo"
            FILTERS_QUEUE_NAME: "yaelwil-filters-sqs-queue-prod-${{ inputs.region-code }}-k8s-project.fifo"
            TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
            CERT_PREFIX: "yaelwil-certificate-prod-${{ inputs.region-code }}"
          EOF

          # Generate the ConfigMap YAML file
          cat <<EOF > filters-dev-configmap.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: filters-config
            namespace: dev
          data:
            TELEGRAM_APP_URL: "https://${{ inputs.app-url }}"
            ALB_URL: "http://${{ inputs.app-url }}:80"
            REGION: "${{ inputs.region-code }}"
            BUCKET_NAME: "yaelwil-bucket-dev-${{ inputs.region-code }}-k8s-project"
            DYNAMODB_TABLE_NAME: "yaelwil-dynamodb-dev-${{ inputs.region-code }}-k8s-project"
            YOLO_QUEUE_NAME: "yaelwil-yolov5-sqs-queue-dev-${{ inputs.region-code }}-k8s-project.fifo"
            FILTERS_QUEUE_NAME: "yaelwil-filters-sqs-queue-dev-${{ inputs.region-code }}-k8s-project.fifo"
          EOF
          
          cat <<EOF > filters-prod-configmap.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: filters-config
            namespace: prod
          data:
            TELEGRAM_APP_URL: "https://${{ inputs.app-url }}"
            ALB_URL: "http://${{ inputs.app-url }}:80"
            REGION: "${{ inputs.region-code }}"
            BUCKET_NAME: "yaelwil-bucket-prod-${{ inputs.region-code }}-k8s-project"
            DYNAMODB_TABLE_NAME: "yaelwil-dynamodb-prod-${{ inputs.region-code }}-k8s-project"
            YOLO_QUEUE_NAME: "yaelwil-yolov5-sqs-queue-prod-${{ inputs.region-code }}-k8s-project.fifo"
            FILTERS_QUEUE_NAME: "yaelwil-filters-sqs-queue-prod-${{ inputs.region-code }}-k8s-project.fifo"
          EOF

          # Generate the ConfigMap YAML file
          cat <<EOF > yolo-dev-configmap.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: yolo-config
            namespace: dev
          data:
            TELEGRAM_APP_URL: "https://${{ inputs.app-url }}"
            ALB_URL: "http://${{ inputs.app-url }}:80"
            REGION: "${{ inputs.region-code }}"
            BUCKET_NAME: "yaelwil-bucket-dev-${{ inputs.region-code }}-k8s-project"
            DYNAMODB_TABLE_NAME: "yaelwil-dynamodb-dev-${{ inputs.region-code }}-k8s-project"
            YOLO_QUEUE_NAME: "yaelwil-yolov5-sqs-queue-dev-${{ inputs.region-code }}-k8s-project.fifo"
            FILTERS_QUEUE_NAME: "yaelwil-filters-sqs-queue-dev-${{ inputs.region-code }}-k8s-project.fifo"
          EOF
          
          cat <<EOF > yolo-prod-configmap.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: yolo-config
            namespace: prod
          data:
            TELEGRAM_APP_URL: "https://${{ inputs.app-url }}"
            ALB_URL: "http://${{ inputs.app-url }}:80"
            REGION: "${{ inputs.region-code }}"
            BUCKET_NAME: "yaelwil-bucket-prod-${{ inputs.region-code }}-k8s-project"
            DYNAMODB_TABLE_NAME: "yaelwil-dynamodb-prod-${{ inputs.region-code }}-k8s-project"
            YOLO_QUEUE_NAME: "yaelwil-yolov5-sqs-queue-prod-${{ inputs.region-code }}-k8s-project.fifo"
            FILTERS_QUEUE_NAME: "yaelwil-filters-sqs-queue-prod-${{ inputs.region-code }}-k8s-project.fifo"
          EOF

          # Securely copy files to the remote server
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" filters-dev-configmap.yaml ubuntu@$CONTROL_PLANE_IP:~/k8s/FiltersMicroservice
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" filters-prod-configmap.yaml ubuntu@$CONTROL_PLANE_IP:~/k8s/FiltersMicroservice
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" polybot-dev-configmap.yaml ubuntu@$CONTROL_PLANE_IP:~/k8s/PolybotMicroservice
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" polybot-prod-configmap.yaml ubuntu@$CONTROL_PLANE_IP:~/k8s/PolybotMicroservice
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" yolo-dev-configmap.yaml ubuntu@$CONTROL_PLANE_IP:~/k8s/YoloMicroservice
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" yolo-prod-configmap.yaml ubuntu@$CONTROL_PLANE_IP:~/k8s/YoloMicroservice

          # Clean up the private key
          rm yaelwil-private-key.pem
        env:
          CONTROL_PLANE_IP: ${{ env.CONTROL_PLANE_IP }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}