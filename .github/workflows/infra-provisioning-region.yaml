name: Polybot Infrastructure Region

on:
  workflow_call:
    inputs:
      region-code:
        required: true
        type: string
      telegram_app_url_dev:
        required: true
        type: string
      telegram_app_url_prod:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      TELEGRAM_TOKEN_DEV:
        required: true
      TELEGRAM_TOKEN_PROD:
        required: true



jobs:
  Terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: terraform  # The directory containing your Terraform configuration files
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.0

      - name: Terraform init
        run: terraform init

      - name: Terraform workspace select
        run: terraform workspace select ${{ inputs.region-code }} || terraform workspace new ${{ inputs.region-code }}

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: | 
          terraform plan -var-file=region.${{ inputs.region-code }}.tfvars

      - name: Terraform apply
        run: |
          terraform apply -auto-approve -var-file=region.${{ inputs.region-code }}.tfvars

      - name: Get the control plane ip
        run: |
          EC2_CONTROL_PLANE=$(aws ec2 describe-instances --region ${{ inputs.region-code }} \
              --filters "Name=tag:Name,Values=*control-plane*" \
                        "Name=tag:Name,Values=*yaelwil*" \
                        "Name=tag:Name,Values=*k8s-project*" \
              --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' \
              --output json)
          
          # Extract Control Plane IP-
          CONTROL_PLANE_IP=$(echo "$EC2_CONTROL_PLANE" | jq -r '.[][] | select(.[1] == "running") | .[2]')  
          # Extract Control Plane ID-
          INSTANCE_CP_ID=$(echo "$EC2_CONTROL_PLANE" | jq -r '.[][] | select(.[1] == "running") | .[0]')
          
          echo "CONTROL_PLANE_IP=$CONTROL_PLANE_IP" >> $GITHUB_ENV
          echo "INSTANCE_CP_ID=$INSTANCE_CP_ID" >> $GITHUB_ENV

      - name: Get the worker node IPs and IDs
        run: |
          EC2_WORKER_NODES=$(aws ec2 describe-instances --region ${{ inputs.region-code }} \
              --filters "Name=tag:Name,Values=*worker-node*" \
                        "Name=tag:Name,Values=*yaelwil*" \
                        "Name=tag:Name,Values=*k8s-project*" \
              --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' \
              --output json)
          
          # Extract Worker Node IPs and IDs
          WORKER_NODE_IPS=$(echo "$EC2_WORKER_NODES" | jq -r '.[][] | select(.[1] == "running") | .[2]')
          WORKER_NODE_IDS=$(echo "$EC2_WORKER_NODES" | jq -r '.[][] | select(.[1] == "running") | .[0]')
          
          # Convert IPs and IDs to newline-separated strings
          WORKER_NODE_IPS_LIST=$(echo "$WORKER_NODE_IPS" | tr '\n' ' ')
          WORKER_NODE_IDS_LIST=$(echo "$WORKER_NODE_IDS" | tr '\n' ' ')
          
          echo "WORKER_NODE_IPS=$WORKER_NODE_IPS_LIST" >> $GITHUB_ENV
          echo "WORKER_NODE_IDS=$WORKER_NODE_IDS_LIST" >> $GITHUB_ENV

      - name: Get jenkins node ip
        run: |
          EC2_JENKINS_NODE=$(aws ec2 describe-instances --region ${{ inputs.region-code }} \
              --filters "Name=tag:Name,Values=*jenkins*" \
                        "Name=tag:Name,Values=*yaelwil*" \
                        "Name=tag:Name,Values=*k8s-project*" \
              --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' \
              --output json)
          
          # Extract Jenkins Node IP-
          JENKINS_NODE_IP=$(echo "$EC2_JENKINS_NODE" | jq -r '.[][] | select(.[1] == "running") | .[2]')  
          # Extract Jenkins Node ID-
          JENKINS_NODE_ID=$(echo "$EC2_JENKINS_NODE" | jq -r '.[][] | select(.[1] == "running") | .[0]')
          
          echo "JENKINS_NODE_IP=$JENKINS_NODE_IP" >> $GITHUB_ENV
          echo "JENKINS_NODE_ID=$JENKINS_NODE_ID" >> $GITHUB_ENV
          
      - name: Wait for Control Plane, Worker Node and Jenkins node Instances Status
        run: |
          # Wait for Control Plane instance to be OK
          aws ec2 wait instance-status-ok --instance-ids "$INSTANCE_CP_ID" --region ${{ inputs.region-code }}

          # Wait for all Worker Node instances to be OK
          for instance_id in $INSTANCE_WN_IDS; do
            aws ec2 wait instance-status-ok --instance-ids "$instance_id" --region ${{ inputs.region-code }}
          done
          
          # Wait for jenkins instance to be OK
          aws ec2 wait instance-status-ok --instance-ids "$JENKINS_NODE_ID" --region ${{ inputs.region-code }}
        
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          INSTANCE_CP_ID: ${{ env.INSTANCE_CP_ID }}
          INSTANCE_WN_IDS: ${{ env.WORKER_NODE_IDS }}
          JENKINS_NODE_ID: ${{ env.JENKINS_NODE_ID }}
          
      - name: Set private key for connection
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > yaelwil-private-key.pem
          chmod 400 yaelwil-private-key.pem

      - name: Cluster Initialization
        run: |
          export REGION=${{ inputs.region-code }}
          export SSH_PRIVATE_KEY="${{ secrets.SSH_PRIVATE_KEY }}"
          chmod +x k8s_initializer.sh
          ./k8s_initializer.sh
        env:
          CONTROL_PLANE_IP: ${{ env.CONTROL_PLANE_IP }}
          
      - name: TLS secret creation
        run: |
          # Copy necessary files to the control plane
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" -r ../k8s ubuntu@$CONTROL_PLANE_IP:~/k8s
          
          # SSH into the control plane to execute the TLS secret creation
          ssh -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" ubuntu@$CONTROL_PLANE_IP << EOF
            export REGION=${{ inputs.region-code }}
            export CERT_PREFIX_DEV="yaelwil-certificate-dev-${{ inputs.region-code }}"
            export KEY_PREFIX_DEV="yaelwil-certificate-pk-dev-${{ inputs.region-code }}"
            export SECRET_NAME_DEV="tls-secret-dev"
  
            export CERT_PREFIX_PROD="yaelwil-certificate-prod-${{ inputs.region-code }}"
            export KEY_PREFIX_PROD="yaelwil-certificate-pk-prod-${{ inputs.region-code }}"
            export SECRET_NAME_PROD="tls-secret-prod"
            # SSH into the control plane to create namespaces
            kubectl create namespace dev || echo "Namespace 'dev' already exists"
            kubectl create namespace prod || echo "Namespace 'prod' already exists"
          
            # Activate the virtual environment on the control plane
            source ~/myenv/bin/activate
            
            # Run the Python script for ingress setup on the control plane
            python3 ~/k8s/ingress_setup.py
          EOF

      - name: Install Ingress Controller
        run: |
          # SSH into the control plane to install ingress controller
          ssh -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" ubuntu@$CONTROL_PLANE_IP << EOF
            kubectl apply -f ~/k8s/deploy.yaml
          EOF
          
      - name: ArgoCD configurations
        run: |
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" -r ../k8s/ArgoCD/application.yaml ubuntu@$CONTROL_PLANE_IP:~/
          ssh -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" ubuntu@$CONTROL_PLANE_IP << EOF
            kubectl apply -n argocd -f ~/application.yaml
          EOF
        env:
          CONTROL_PLANE_IP: ${{ env.CONTROL_PLANE_IP }}