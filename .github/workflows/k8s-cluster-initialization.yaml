name: Cluster Initialization

on:
  workflow_call:
    inputs:
      region-code:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      TELEGRAM_TOKEN:
        required: true
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  Terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: terraform  # The directory containing your Terraform configuration files

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cluster Initialization
        run: |
          export REGION=${{ inputs.region-code }}
          export ENV=${{ inputs.environment }}
          export SSH_PRIVATE_KEY="${{ secrets.SSH_PRIVATE_KEY }}"
          chmod +x k8s_initializer.sh
          ./k8s_initializer.sh

      - name: Copy k8s file
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > yaelwil-private-key.pem
          chmod 400 yaelwil-private-key.pem
          
          # Ensure the namespace exists
          ssh -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" ubuntu@$CONTROL_PLANE_IP \
          "kubectl create namespace ${{ inputs.environment }} --dry-run=client -o yaml | kubectl apply -f -"

          # Generate the ConfigMap YAML file
          cat <<EOF > configmap.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: polybot-config
          data:
            TELEGRAM_APP_URL: "https://yaelwil.int-devops.click"
            ALB_URL: "http://yaelwil.int-devops.click:80"
            REGION: "${{ inputs.region-code }}"
            BUCKET_NAME: "yaelwil-bucket-${{ inputs.environment }}-${{ inputs.region-code }}-k8s-project"
            DYNAMODB_TABLE_NAME: "yaelwil-dynamodb-${{ inputs.environment }}-${{ inputs.region-code }}-k8s-project"
            YOLO_QUEUE_NAME: "yaelwil-yolov5-sqs-queue-${{ inputs.environment }}-${{ inputs.region-code }}-k8s-project.fifo"
            FILTERS_QUEUE_NAME: "yaelwil-filters-sqs-queue-${{ inputs.environment }}-${{ inputs.region-code }}-k8s-project.fifo"
            TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
          EOF

          # Securely copy files to the remote server
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" -r ../k8s ubuntu@$CONTROL_PLANE_IP:~/k8s
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" configmap.yaml ubuntu@$CONTROL_PLANE_IP:~/k8s/FiltersMicroservice
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" configmap.yaml ubuntu@$CONTROL_PLANE_IP:~/k8s/PolybotMicroservice
          scp -o StrictHostKeyChecking=no -i "yaelwil-private-key.pem" configmap.yaml ubuntu@$CONTROL_PLANE_IP:~/k8s/YoloMicroservice

          # Clean up the private key
          rm yaelwil-private-key.pem
        env:
          CONTROL_PLANE_IP: ${{ secrets.CONTROL_PLANE_IP }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
